           ThinLisp
             1.1

  What is it?
  -----------

ThinLisp is an open source Lisp to C translator for delivering Common
Lisp-based applications.  It implements a subset of CL with
extensions.  ThinLisp itself is written in CL, and so must run on top
of an underlying CL implementation such as Allegro, MCL, or CMU Lisp.
The C code resulting from a translation can then be independently
compiled to produce a small, efficient executable image.

ThinLisp is not a typical Lisp implementation in that it produces
stand alone C programs/libraries - these depend only on the C runtime
and standard library, which means that there is no garbage collector
or lisp run-time features (like eval, for example) included. ThinLisp
generally produces very human-readable (indeed, better than some
humans...) and lean code, and there is usually no penalty for
interfacing with other C code. Here is what the original authors had
to say about it:
	
"ThinLisp is designed for producing high quality deliverable C
libraries and executables from Lisp sources.  Originally designed for
real-time control applications, ThinLisp stresses run-time performance
at the expense of some development time conveniences.  This is exactly
the opposite design philosophy from many Lisps, but that's what makes
this one thin!"

ThinLisp is the current generation (4th) of a series of Lisp to C
translators used to deploy a large Lisp system (1 million lines) built
starting around 1990.

The emitted C code has been tested in the past on 19 different
platforms including Windows 95/98 and Windows NT for Intel and Alpha
under both Cygnus and Visual C; UNIXes from Linux, FreeBSD, Sun, HP,
IBM, SGI, Aviion, DEC UNIX, OSF, NEC, and Motorola; and VMS for VAX
and Alpha.  Though it has been some time since those platforms have
been checked, we believe that there has been little change to the
underlying C structures used, and so the generated C code should
remain extremely portable.

ThinLisp produces compile time warnings for uses of inherently slow
Lisp operations, for consing operations, and for code that cannot be
optimized due to a lack of sufficient type declarations.  These
warnings can be suppressed by improving the code, or through use of
lexical declarations acknowledging that the code is only of prototype
quality.  Code meeting the stringent requirements imposed by ThinLisp
generally cannot by sped up by rewriting it by hand in C.

The development environment for a project using ThinLisp is provided
by your favorite Common Lisp implementation.  You author, debug, and
test your program in that environment and when you wish to deploy the
program you translate it to C and compile and link it in on your the
platform of choice.  During it's history programs in the ThinLisp
dialect have been deployed on over a dozen different platforms.

The copyrights to the ThinLisp sources are held by the ThinLisp Group.

  Contacts
  --------

Web Site: http://www.thinlisp.org/

See there for all mailing list details, distributions, bug reporting
etc.

  Documentation
  -------------

The documentation is maintained as a set of info files. The file
src/docs/tl-manual.info is the good starting point.

  Installation
  ------------

See the INSTALL file in this directory.


  Licensing
  ---------

See the LICENSE file in this directory.

  Acknowledgments
  ----------------

Vladimir Sedach did some work to patch up this release of ThinLisp.

As of the time of this writing, the "current contributors" (a couple
of years ago... :) are Jim Allard and Ben Hyde, the former of whom
seems to be responsible for most of the damage. Here is what he has to
say (take from the manual):

"Thanks to Ben Hyde for convincing Gensym and myself that this system
should be taken off the shelf, polished up, and released as open
source software. Mike Colena and Glen Iba wrote significant parts of
the implementation. Nick Caruso, Joe Devlin, Rick Harris, and John
Hodgkinson and also contributed their time, sage opinions, and
code. Thanks to Lowell Hawkinson, Jim Pepe, and Dave Riddell for their
support of this work at Gensym Corporation. Bill Brody, Kim Barrett,
and Rick Harris wrote much of the Chestnut Lisp to C translator that
was the philosophical precursor to this work. Thanks to Kim Barrett
and David Sotkowitz of IS Robotics, Inc. (now iRobot Corporation) for
contributions of multiple-inheritance code and opinions, and to Rod
Brooks and Dave Barrett for their ideas. Finally, thanks to my wife,
Gerry Zipser, for putting up with the bleary-eyed aftermath of coding
sessions, and for helping to focus efforts during this past summer's
release push." -- Jim Allard
